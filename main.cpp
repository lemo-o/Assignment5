/*
I'm actually really proud of this one, theres very little I would change about it. As an idea, it's solid, coding wise, I would rewrite to run
better, because it is fundamentally running off of nested if statements, which are not known for good performance, but they were easy to implement.
Instead of having seperate rooms, I just made one room with 4 walls; functionally it's the same. 
Originally I had a couple more ideas going around in my head that I wanted to execute, but then I realized that it probably would have taken me
3 more hours to execute those ideas, and its already midnight as I'm writing this code.

Midnight turned to 2:30 am as I ironed it out lol
*/

#include <iostream>
#include <random>
#include <algorithm>
#include <ctime>
#include <math.h>
using namespace std;

//I'm grabbing code from lab 4
mt19937 twisting_time(size_t seed)
{
    //randomly learned about static vars here,
    //and constexpr - kinda neat
    static constexpr size_t NDISCARD = 1024;

    minstd_rand lcg(seed);
    lcg.discard(NDISCARD);

    size_t seeds[mt19937::state_size];
    generate_n(seeds, mt19937::state_size, lcg);

    seed_seq seed_sequence(begin(seeds), end(seeds));
    mt19937 twister{seed_sequence};
    twister.discard(NDISCARD);

    return twister;
}
struct object
{
    object() : twister(twisting_time(rand_dev())) {}
    object(size_t seed) : twister(twisting_time(seed)) {}

    int next() { return distribution(twister); }
    mt19937 twister;

    //This std::random_device brought me so much pain
    static std::random_device rand_dev;
    static uniform_int_distribution<int> distribution;
    //and this semicolon like what
    //I mean it makes sense after the fact - it would make less sense without it there
};

random_device object::rand_dev;
uniform_int_distribution<int> object::distribution(1000, 9999);
bool firstroom = true;
void directionmenu()
{
    if (firstroom == true)
    {
        cout << "What side of the room would you like to look at first?" << endl
             << "North (1)" << endl
             << "East (2)" << endl
             << "South (3)" << endl
             << "West (4)" << endl;
        firstroom = false;
    }
    else
    {
        cout << "What would you like to do?" << endl
             << "North (1)" << endl
             << "East (2)" << endl
             << "South (3)" << endl
             << "West (4)" << endl
             << "Help (5)" << endl
             << "Inventory (6)" << endl;
    }
}
void helpmenu()
{
    if (firstroom == false)
    {
        cout << "You can: \n"
             << "Move to different walls\n"
             << "and interact with objects\n";
    }
}
bool iteminteraction()
{
    cout << "y/n  ";
    string input;
    cin >> input;
    if (input == "y" || input == "Y")
    {
        return 1;
    }
    else if (input == "n" || input == "N")
    {
        //kinda redeundant not gonna lie. More for if you manage to get here again you can put the hammer back I guess
        //Then I changed it so you *can't* lose items
        //item = 0;
        return 0;
    }
    else
    {
        cout << "invalid input";
    }
    return 0;
}
//this is the player's "inventory" handling
//bools are for internal handling, while this void is for returning what the player has in their possesion to the player
bool hammer, screwdriver, haspin;
//I had to define the pin higher so that it was within the scope and define and stuff
int pin;
void inventory()
{
    if (hammer == 1)
    {
        cout << "You have:" << endl
             << "A hammer" << endl;
    }
    if (screwdriver == 1)
    {
        cout << "You have:" << endl
             << "A hammer" << endl
             << "A scredriver" << endl;
    }
    if (haspin == 1)
    {
        cout << "You have:" << endl
             << "A hammer" << endl
             << "A scredriver" << endl
             << "The pin - " << pin << "." << endl;
    }
    if (hammer = 0)
    {
        cout << "You have nothing but your wits. Good luck MacGyver." << endl;
    }
}
bool loopbreaker = true;
int choice;
int eyegrabber;
bool first1 = true, first2 = true, first3 = true, first4 = true;
int main()
{
    {
        object a;
        //set the value to a 4 digit number generated by the mersene twister
        pin = a.next();
    }
    cout << "You find yourself trapped in a brick room and the only exit appears to be a steel door locked with \na keypad. You must find the code to escape if you ever want to get out alive." << endl;
    for (int i = 0; loopbreaker == true; i++)
    {
        directionmenu();
        cin >> choice;
        switch (choice)
        {
        //North
        case 1:
            if (first1 == true)
            {
                cout << "You approach the North wall. There is a tooling table that has a hammer on it. Would you like to take the hammer?" << endl;
                hammer = iteminteraction();
                first1 = false;
                break;
            }
            if (hammer == 0 && first1 == false)
            {
                cout << "Have you come back to take the hammer now? Have you come back after realizing that you might need it?" << endl;
                hammer = iteminteraction();
                if(hammer == 0)
                {
                    cout << "ok" << endl;
                }
                break;
            }
            if (first1 == false && hammer == 0)
            {
                cout << "There is not much that you can do here" << endl;
            }
            break;

        //East
        case 2:
            if (haspin == 1)
            {
                cout << "You approach the steel door, pin in hand;" << endl
                     << "Please enter your pin:" << endl;
                int pinholder;
                for (int i = 0; i < 3; i++)
                {
                    cin >> pinholder;
                    if (pinholder == pin)
                    {
                        loopbreaker = false;
                        cout << "Access Granted. Opening Door." << endl;
                        break;
                    }
                    else
                    {
                        cout << "Please try again." << endl;
                    }
                    //efficient use of variables
                    pinholder = i;
                }
                if(pinholder == 2) {
                // of course theres no timer attached to this
                    cout << "You have been locked out. Please try again in 30 seconds." << endl;
                }
                break;
            }
            if (first2 == true)
            {
                cout << "You approach the East wall. This is the wall that has the steel door and the code lock. There is not much that you can do here. \n";
                first2 = false;
                break;
            }
            if (haspin == 0 && first2 == false)
            {
                cout << "yep... still steel\n\n\nstill there.\n\nIt's not like a fridge where your standards will get low enough and you'll eventually fit through it." << endl;
                break;
            }

            break;

        //South
        case 3:
            if (first3 == true)
            {
                cout << "On the Southern wall you find a scredriver behind a heavy glass case that has been attached to the wall." << endl;
                if (hammer == 1)
                {
                    cout << "Would you like to break the glass and take the screwdriver?" << endl;
                    screwdriver = iteminteraction();
                }
                first3 = false;
                break;
            }
            if (hammer == 1 && screwdriver == 0)
            {
                cout << "You return to the southern wall with the screwdriver behind a glass case.\n";
                cout << "Would you like to break the glass and take the screwdriver?" << endl;
                screwdriver = iteminteraction();
                break;
            }
            if (first3 == false && hammer == 0)
            {
                cout << "There is not much that you can do here" << endl;
            }
            break;
        //West
        case 4:
            if (first4 == true)
            {
                cout << "There is a conspicuous looking clock on the wall. You can reach it, but you can't pull it off of the wall." << endl;
                if (hammer == 1)
                {
                    cout << "Would you like to try and use your hammer to pry the clock off the wall?" << endl;
                    //this is NOT the intended purpose of this func - however, it doesn't change anything because you can't lose items
                    //and then this interaction doesn't do anything, its 100% flavortext
                    bool hidden = iteminteraction();
                    if (hidden == 1 && first3 == true)
                    {
                        cout << "It seems like you'll have to take the screws off the face of the clock to see whats behind the clock" << endl;
                    }
                    if (hidden == 1 && first3 == false)
                    {
                        cout << "It looks like you'll need a different tool for this job" << endl;
                    }
                }
                if (screwdriver == 1 && haspin == 0)
                {
                    cout << "You can unscrew the screws that screw the clock in the wall" << endl
                         << "Would you like to do so?" << endl;
                    bool screwclock = iteminteraction();
                    if (screwclock == 1)
                    {
                        cout << "You manage to pull the clock off the wall, and behind it you find the pin to the keypad." << endl
                             << "The pin is: " << pin << "." << endl;
                        haspin = 1;
                    }
                    if (screwclock == 0)
                    {
                        cout << "oh ok" << endl;
                    }
                }
                first4 = false;
                break;
            }
            if (first4 == false && haspin == 0)
            {
                if (hammer == 1)
                {
                    cout << "Would you like to try and use your hammer to pry the clock off the wall?" << endl;
                    //this is NOT the intended purpose of this func - however, it doesn't change anything because you can't lose items
                    //and then this interaction doesn't do anything, its 100% flavortext
                    bool hidden = iteminteraction();
                    if (hidden == 1 && first3 == true)
                    {
                        cout << "It seems like you'll have to take the screws off the face of the clock to see whats behind the clock" << endl;
                    }
                    if (hidden == 1 && first3 == false)
                    {
                        cout << "It looks like you'll need a different tool for this job" << endl;
                    }
                }
                if (screwdriver == 1)
                {
                    cout << "You can unscrew the screws that screw the clock in the wall" << endl
                         << "Would you like to do so?" << endl;
                    bool screwclock = iteminteraction();
                    if (screwclock == 1)
                    {
                        cout << "You manage to pull the clock off the wall, and behind it you find the pin to the keypad." << endl
                             << "The pin is: " << pin << "." << endl;
                        haspin = 1;
                    }
                    if (screwclock == 0)
                    {
                        cout << "oh ok" << endl;
                    }
                }
            }
            if (first4 == false && haspin == 1)
            {
                cout << "Looking back at the place where the clock was, the pin is " << pin << "." << endl;
            }
            break;

        case 5:
            helpmenu();
            //looking at the help menu shouldn't count towards your "score"
            i -= i;
            break;
        case 6:
            inventory();
            //looking at the inventory shouldn't count towards "score"
            i -= i;
            break;
        }
        //grabs the value of I
        eyegrabber = i;
    }

    cout << "It took you " << eyegrabber << " steps to get out of the room." << endl;
    return 0;
}